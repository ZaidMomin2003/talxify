// This is an autogenerated file from Firebase Studio.

'use server';

/**
 * @fileOverview A flow to generate interview questions based on role, level, and technologies.
 *
 * - generateInterviewQuestions - A function that generates interview questions.
 * - GenerateInterviewQuestionsInput - The input type for the generateInterviewQuestions function.
 * - GenerateInterviewQuestionsOutput - The return type for the generateInterviewQuestions function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const GenerateInterviewQuestionsInputSchema = z.object({
  role: z.string().describe('The role for which interview questions are generated.'),
  level: z.string().describe('The level of the role (e.g., entry-level, mid-level, senior).'),
  technologies: z.string().describe('A comma-separated list of technologies relevant to the role.'),
});
export type GenerateInterviewQuestionsInput = z.infer<typeof GenerateInterviewQuestionsInputSchema>;

const GenerateInterviewQuestionsOutputSchema = z.object({
  questions: z.array(z.string()).describe('An array of interview questions.'),
});
export type GenerateInterviewQuestionsOutput = z.infer<typeof GenerateInterviewQuestionsOutputSchema>;

export async function generateInterviewQuestions(input: GenerateInterviewQuestionsInput): Promise<GenerateInterviewQuestionsOutput> {
  return generateInterviewQuestionsFlow(input);
}

const prompt = ai.definePrompt({
  name: 'generateInterviewQuestionsPrompt',
  input: {schema: GenerateInterviewQuestionsInputSchema},
  output: {schema: GenerateInterviewQuestionsOutputSchema},
  prompt: `You are Kathy, an expert technical interviewer at Talxify. Your tone is professional, encouraging, and clear.
  
  Your task is to generate a concise list of interview questions for a candidate.

  **Candidate Profile:**
  - **Role:** {{role}}
  - **Level:** {{level}}
  - **Technologies:** {{technologies}}

  **Instructions:**
  1.  Generate a mix of technical questions that directly relate to the specified technologies and level.
  2.  Include at least one behavioral question to assess soft skills.
  3.  Ensure the questions are open-ended and designed to provoke a detailed response, not a simple yes/no answer.
  4.  Keep the questions clear and to the point.
  
  Format the response as a JSON array of strings. Each string must be a single question.
  `,
});

const generateInterviewQuestionsFlow = ai.defineFlow(
  {
    name: 'generateInterviewQuestionsFlow',
    inputSchema: GenerateInterviewQuestionsInputSchema,
    outputSchema: GenerateInterviewQuestionsOutputSchema,
  },
  async input => {
    const {output} = await prompt(input);
    return output!;
  }
);
